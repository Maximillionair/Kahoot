<%- include('../partials/header') %>

<div class="game-play" id="game-container">
  <% if (isHost) { %>
    <!-- Host View -->
    <div class="host-view" id="host-view">
      <h2 class="quiz-title"><%= game.quiz.title %></h2>
      
      <div class="host-controls">
        <button id="next-question-btn" class="btn primary">Start First Question</button>
      </div>
      
      <div class="question-display" id="question-display" style="display:none;">
        <h3 id="question-text"></h3>
        
        <div class="options-grid">
          <div class="option" data-option="0"></div>
          <div class="option" data-option="1"></div>
          <div class="option" data-option="2"></div>
          <div class="option" data-option="3"></div>
        </div>
        
        <div class="timer-container">
          <div id="timer" class="timer"></div>
          <span id="timer-text">20</span>
        </div>
      </div>
      
      <div class="player-status">
        <h3>Players Answered: <span id="answered-count">0</span>/<span id="player-count">0</span></h3>
      </div>
      
      <div class="leaderboard" id="leaderboard" style="display:none;">
        <h3>Leaderboard</h3>
        <ol id="scores-list"></ol>
      </div>
    </div>
  <% } else { %>
    <!-- Player View -->
    <div class="player-view" id="player-view">
      <h2 class="player-name">Playing as: <%= player.username %></h2>
      
      <div class="waiting-screen" id="waiting-screen">
        <h3>Waiting for question...</h3>
      </div>
      
      <div class="question-container" id="question-container" style="display:none;">
        <h3 id="question-text"></h3>
        
        <div class="timer-container">
          <div id="timer" class="timer"></div>
          <span id="timer-text">20</span>
        </div>
        
        <div class="options-grid" id="options-grid">
          <button class="option" data-option="0"></button>
          <button class="option" data-option="1"></button>
          <button class="option" data-option="2"></button>
          <button class="option" data-option="3"></button>
        </div>
      </div>
      
      <div class="answer-result" id="answer-result" style="display:none;">
        <div id="result-icon"></div>
        <h3 id="result-text"></h3>
        <p id="points-text"></p>
      </div>
      
      <div class="game-over" id="game-over" style="display:none;">
        <h3>Game Over!</h3>
        <div id="final-score"></div>
        <div id="final-rank"></div>
      </div>
    </div>
  <% } %>
</div>

<script src="/socket.io/socket.io.js"></script>
document.addEventListener('DOMContentLoaded', function() {
    const socket = io();
    const gameId = '<%= game._id %>';
    let currentQuestion = null;
    let timerInterval = null;
    let startTime = 0;
    
    <% if (isHost) { %>
      // Host Game Logic
      // [Host logic was already included in the previous artifact]
      
    <% } else { %>
      // Player Game Logic
      const waitingScreen = document.getElementById('waiting-screen');
      const questionContainer = document.getElementById('question-container');
      const questionText = document.getElementById('question-text');
      const optionsGrid = document.getElementById('options-grid');
      const options = document.querySelectorAll('.option');
      const timerElement = document.getElementById('timer');
      const timerText = document.getElementById('timer-text');
      const answerResult = document.getElementById('answer-result');
      const resultIcon = document.getElementById('result-icon');
      const resultText = document.getElementById('result-text');
      const pointsText = document.getElementById('points-text');
      const gameOver = document.getElementById('game-over');
      const finalScore = document.getElementById('final-score');
      const finalRank = document.getElementById('final-rank');
      
      let hasAnswered = false;
      
      // Join the game as player
      socket.emit('join-game', {
        gameId: gameId,
        username: '<%= player.username %>'
      });
      
      // Receive new question from server
      socket.on('new-question', function(data) {
        waitingScreen.style.display = 'none';
        questionContainer.style.display = 'block';
        answerResult.style.display = 'none';
        
        currentQuestion = data;
        hasAnswered = false;
        questionText.textContent = data.question;
        
        // Enable all options
        options.forEach((option, index) => {
          option.textContent = data.options[index];
          option.disabled = false;
          option.classList.remove('selected');
        });
        
        // Start timer
        let timeLeft = data.timeLimit;
        timerText.textContent = timeLeft;
        startTime = Date.now();
        
        clearInterval(timerInterval);
        timerInterval = setInterval(() => {
          timeLeft--;
          timerText.textContent = timeLeft;
          timerElement.style.width = (timeLeft / data.timeLimit * 100) + '%';
          
          if (timeLeft <= 0) {
            clearInterval(timerInterval);
            
            if (!hasAnswered) {
              disableOptions();
              showAnswer(false, 0);
            }
          }
        }, 1000);
      });
      
      // Handle option click
      optionsGrid.addEventListener('click', function(e) {
        if (e.target.classList.contains('option') && !hasAnswered) {
          const selectedOption = parseInt(e.target.dataset.option);
          const timeElapsed = Date.now() - startTime;
          
          // Mark as answered
          hasAnswered = true;
          e.target.classList.add('selected');
          
          // Disable all options
          disableOptions();
          
          // Send answer to server
          socket.emit('submit-answer', {
            gameId: gameId,
            answer: selectedOption,
            time: timeElapsed
          });
        }
      });
      
      // Function to disable options
      function disableOptions() {
        options.forEach(option => {
          option.disabled = true;
        });
      }
      
      // Receive answer result
      socket.on('answer-result', function(data) {
        questionContainer.style.display = 'none';
        answerResult.style.display = 'block';
        
        if (data.correct) {
          resultIcon.innerHTML = '✅';
          resultText.textContent = 'Correct!';
          pointsText.textContent = `+${data.points} points`;
        } else {
          resultIcon.innerHTML = '❌';
          resultText.textContent = 'Wrong!';
          pointsText.textContent = '0 points';
        }
      });
      
      // Function to show answer
      function showAnswer(correct, points) {
        questionContainer.style.display = 'none';
        answerResult.style.display = 'block';
        
        if (correct) {
          resultIcon.innerHTML = '✅';
          resultText.textContent = 'Correct!';
          pointsText.textContent = `+${points} points`;
        } else {
          resultIcon.innerHTML = '❌';
          resultText.textContent = 'Wrong!';
          pointsText.textContent = '0 points';
        }
      }
      
      // Game over
      socket.on('game-over', function(data) {
        waitingScreen.style.display = 'none';
        questionContainer.style.display = 'none';
        answerResult.style.display = 'none';
        gameOver.style.display = 'block';
        
        // Find player's score and rank
        const playerData = data.scores.find(p => p.username === '<%= player.username %>');
        const rank = data.scores.findIndex(p => p.username === '<%= player.username %>') + 1;
        
        if (playerData) {
          finalScore.textContent = `Your score: ${playerData.score} points`;
          finalRank.textContent = `Your rank: ${rank} of ${data.scores.length}`;
        }
      });
      
      // Handle host disconnect
      socket.on('host-disconnected', function() {
        alert('The host has left the game.');
        window.location.href = '/game/join';
      });
    <% } %>
  });
</script>

<%- include('../partials/footer') %>